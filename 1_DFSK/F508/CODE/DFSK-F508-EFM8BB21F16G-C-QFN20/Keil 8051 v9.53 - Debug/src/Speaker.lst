C51 COMPILER V9.53.0.0   SPEAKER                                                           08/11/2020 17:20:47 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPEAKER
OBJECT MODULE PLACED IN .\src\Speaker.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe G:\Office_inform
                    -ation\souce_software\1_DFSK\F508\1_CODE\DFSK-F508-EFM8BB21F16G-C-QFN20\src\Speaker.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(L
                    -ARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(G:\Office_info
                    -rmation\souce_software\1_DFSK\F508\1_CODE\DFSK-F508-EFM8BB21F16G-C-QFN20\inc;D:/SiliconLabs/SimplicityStudio/v4/develope
                    -r/sdks/8051/v4.1.5//Device/shared/si8051base;D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.5//Device/EFM8B
                    -B2/inc) PRINT(.\src\Speaker.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Speaker.OBJ)

line level    source

   1          /*********************************************************************************************************
             -************
   2          ** FILE NAME: Speakear.c
   3          **
   4          ** PROJECT:  DFSK_F508_RADAR
   5          ** CPU:      EFM8BB21F16G
   6          ** COMPILER: SILICON
   7          ** -------------------------------------------------------------------------------------------------------
             -------------
   8          ** VERSION:  V0.1
   9          ** DATE:     2020.08.06
  10          **********************************************************************************************************
             -***********/
  11          #include        "Cpu.h"
  12          #include        "Speaker.h"
  13          #include        "DetectObj.h"
  14          stSpeaker       xdata Speaker;
  15          
  16          void    Spk_InitHardware (void)
  17          {
  18   1              SPEAKER_PORT_DIR_OUT;
  19   1              SPEAKER_PORT = V_HIGH;
  20   1      }
  21          
  22          void    Spk_InitVariable (void)
  23          {
  24   1              Speaker.WarningType = SPEAKER_TYPE_NONE;
  25   1              Speaker.WarningPeriod = SPEAKER_PERIOD_0HZ;
  26   1              Speaker.bContinous = TRUE;
  27   1              Speaker.Counter = 0;
  28   1      }
  29          
  30          void    Spk_DriveTheSpeaker (void)
  31          {
  32   1              BYTE WarningClass = NearestData.bNearestDistance;
  33   1      
  34   1              if(WarningClass > SPEAKER_MAX_DISTANCE_2HZ)
  35   1              {
  36   2                      WarningClass = SPEAKER_TYPE_NONE;
  37   2              }
  38   1              else if(WarningClass > SPEAKER_MAX_DISTANCE_4HZ)
  39   1              {
  40   2                      WarningClass = SPEAKER_TYPE_2HZ;
  41   2              }
  42   1              else if(WarningClass > SPEAKER_MAX_DISTANCE_CONTIN)
  43   1              {
  44   2                      WarningClass = SPEAKER_TYPE_4HZ;
  45   2              }
  46   1              else
  47   1              {
  48   2                      WarningClass = SPEAKER_TYPE_CONTIN;
C51 COMPILER V9.53.0.0   SPEAKER                                                           08/11/2020 17:20:47 PAGE 2   

  49   2              }
  50   1      
  51   1              Speaker.Counter ++;
  52   1              if(WarningClass != Speaker.WarningType &&
  53   1                 Speaker.Counter >= Speaker.WarningPeriod)
  54   1              {
  55   2                      if(WarningClass == SPEAKER_TYPE_NONE)
  56   2                      {
  57   3                              Speaker.Counter = 0;
  58   3                              Speaker.WarningPeriod = SPEAKER_PERIOD_0HZ;
  59   3                              Speaker.bContinous = TRUE;
  60   3                              SPEAKER_PORT = V_HIGH;
  61   3                      }
  62   2                      else if(WarningClass == SPEAKER_TYPE_2HZ)
  63   2                      {
  64   3                              Speaker.Counter = 0;
  65   3                              Speaker.WarningPeriod = SPEAKER_PERIOD_2HZ;
  66   3                              Speaker.bContinous = FALSE;
  67   3                      }
  68   2                      else if(WarningClass == SPEAKER_TYPE_4HZ)
  69   2                      {
  70   3                              Speaker.Counter = 0;
  71   3                              Speaker.WarningPeriod = SPEAKER_PERIOD_4HZ;
  72   3                              Speaker.bContinous = FALSE;
  73   3                      }
  74   2                      else if(WarningClass == SPEAKER_TYPE_CONTIN)
  75   2                      {
  76   3                              Speaker.Counter = 0;
  77   3                              Speaker.WarningPeriod = SPEAKER_PERIOD_0HZ;
  78   3                              Speaker.bContinous = TRUE;
  79   3                              SPEAKER_PORT = V_LOW;
  80   3                      }
  81   2                      Speaker.WarningType = WarningClass;
  82   2              }
  83   1              if(!Speaker.bContinous)
  84   1              {
  85   2                      if(Speaker.Counter >= Speaker.WarningPeriod)
  86   2                      {
  87   3                              SPEAKER_PORT = !SPEAKER_PORT;
  88   3                              Speaker.Counter = 0;
  89   3                      }
  90   2              }
  91   1      
  92   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    222    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
