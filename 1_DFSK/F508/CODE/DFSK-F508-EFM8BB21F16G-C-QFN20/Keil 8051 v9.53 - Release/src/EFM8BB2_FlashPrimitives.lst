C51 COMPILER V9.53.0.0   EFM8BB2_FLASHPRIMITIVES                                           08/11/2020 17:07:22 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB2_FLASHPRIMITIVES
OBJECT MODULE PLACED IN .\src\EFM8BB2_FlashPrimitives.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe G:\Office_inform
                    -ation\souce_software\1_DFSK\F508\1_CODE\DFSK-F508-EFM8BB21F16G-C-QFN20\src\EFM8BB2_FlashPrimitives.c OMF2 SMALL DEBUG OB
                    -JECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCD
                    -IR(G:\Office_information\souce_software\1_DFSK\F508\1_CODE\DFSK-F508-EFM8BB21F16G-C-QFN20\inc;D:/SiliconLabs/SimplicityS
                    -tudio/v4/developer/sdks/8051/v4.1.5//Device/shared/si8051base;D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.
                    -1.5//Device/EFM8BB2/inc) REGFILE(DFSK-F508-EFM8BB21F16G-C-QFN20.ORC) PRINT(.\src\EFM8BB2_FlashPrimitives.lst) COND PAGEW
                    -IDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8BB2_FlashPrimitives.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB2_FlashPrimitives.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2015 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program contains several useful utilities for writing and updating
  10          // flash memory.
  11          //
  12          // Target:         EFM8BB2
  13          // Tool chain:     Keil C51
  14          //
  15          // Release 1.0
  16          //    -Initial Revision (ST)
  17          //    -10 OCT 2014
  18          //
  19          
  20          //-----------------------------------------------------------------------------
  21          // Includes
  22          //-----------------------------------------------------------------------------
  23          #include <SI_EFM8BB2_Register_Enums.h>
  24          #include "EFM8BB2_FlashPrimitives.h"
  25          
  26          //-----------------------------------------------------------------------------
  27          // FLASH_ByteWrite
  28          //-----------------------------------------------------------------------------
  29          //
  30          // Return Value : None
  31          // Parameters   :
  32          //   1) FLADDR addr - address of the byte to write to
  33          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  34          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  35          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  36          //   2) char byte - byte to write to flash.
  37          //
  38          // This routine writes <byte> to the linear flash address <addr>.
  39          //
  40          //-----------------------------------------------------------------------------
  41          void FLASH_ByteWrite (FLADDR addr, uint8_t byte)
  42          {
  43   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
  44   1         SI_VARIABLE_SEGMENT_POINTER(pwrite, uint8_t, SI_SEG_XDATA); // Flash write pointer
  45   1      
  46   1         IE_EA = 0;                          // Disable interrupts
  47   1      
  48   1         VDM0CN = 0x80;                      // Enable VDD monitor
  49   1      
  50   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
C51 COMPILER V9.53.0.0   EFM8BB2_FLASHPRIMITIVES                                           08/11/2020 17:07:22 PAGE 2   

  51   1      
  52   1         pwrite = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_XDATA)) addr;
  53   1      
  54   1         FLKEY  = 0xA5;                      // Key Sequence 1
  55   1         FLKEY  = 0xF1;                      // Key Sequence 2
  56   1         PSCTL |= 0x01;                      // PSWE = 1 which enables writes
  57   1      
  58   1         VDM0CN = 0x80;                      // Enable VDD monitor
  59   1      
  60   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
  61   1         *pwrite = byte;                     // Write the byte
  62   1      
  63   1         PSCTL &= ~0x01;                     // PSWE = 0 which disable writes
  64   1      
  65   1         IE_EA = EA_SAVE;                    // Restore interrupts
  66   1      }
  67          
  68          //-----------------------------------------------------------------------------
  69          // FLASH_ByteRead
  70          //-----------------------------------------------------------------------------
  71          //
  72          // Return Value :
  73          //      uint8_t - byte read from flash
  74          // Parameters   :
  75          //   1) FLADDR addr - address of the byte to read to
  76          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  77          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  78          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  79          //
  80          // This routine reads a <byte> from the linear flash address <addr>.
  81          //
  82          //-----------------------------------------------------------------------------
  83          uint8_t FLASH_ByteRead (FLADDR addr)
  84          {
  85   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
  86   1         SI_VARIABLE_SEGMENT_POINTER(pread, uint8_t, const SI_SEG_CODE); // Flash read pointer
  87   1         uint8_t byte;
  88   1      
  89   1         IE_EA = 0;                          // Disable interrupts
  90   1      
  91   1         pread = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, const SI_SEG_CODE)) addr;
  92   1      
  93   1         byte = *pread;                      // Read the byte
  94   1      
  95   1         IE_EA = EA_SAVE;                    // Restore interrupts
  96   1      
  97   1         return byte;
  98   1      }
  99          
 100          //-----------------------------------------------------------------------------
 101          // FLASH_PageErase
 102          //-----------------------------------------------------------------------------
 103          //
 104          // Return Value : None
 105          // Parameters   :
 106          //   1) FLADDR addr - address of any byte in the page to erase
 107          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
 108          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
 109          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
 110          //
 111          // This routine erases the flash page containing the linear flash address
 112          // <addr>.  Note that the page of flash page containing the Lock Byte cannot be
 113          // erased if the Lock Byte is set.
C51 COMPILER V9.53.0.0   EFM8BB2_FLASHPRIMITIVES                                           08/11/2020 17:07:22 PAGE 3   

 114          //
 115          //-----------------------------------------------------------------------------
 116          void FLASH_PageErase (FLADDR addr)
 117          {
 118   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
 119   1         SI_VARIABLE_SEGMENT_POINTER(pwrite, uint8_t, SI_SEG_XDATA); // Flash write pointer
 120   1      
 121   1         IE_EA = 0;                          // Disable interrupts
 122   1      
 123   1         VDM0CN = 0x80;                      // Enable VDD monitor
 124   1      
 125   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 126   1      
 127   1         pwrite = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_XDATA)) addr;
 128   1      
 129   1         FLKEY  = 0xA5;                      // Key Sequence 1
 130   1         FLKEY  = 0xF1;                      // Key Sequence 2
 131   1         PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
 132   1      
 133   1         VDM0CN = 0x80;                      // Enable VDD monitor
 134   1      
 135   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 136   1         *pwrite = 0;                        // Initiate page erase
 137   1      
 138   1         PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
 139   1      
 140   1         IE_EA = EA_SAVE;                    // Restore interrupts
 141   1      }
 142          
 143          
 144          
 145          void Flash_WriteVechileMode(uint8_t mode)
 146          {
 147   1              FLASH_PageErase(VechileMode_START_ADDRESS);
 148   1              FLASH_ByteWrite(VechileMode_ADDR, mode);
 149   1      }
 150          
 151          uint8_t Flash_ReadVechileMode  (void)
 152          {
 153   1              uint8_t temp_byte;
 154   1              temp_byte = FLASH_ByteRead(VechileMode_ADDR);
 155   1      
 156   1              return temp_byte;
 157   1      }
 158          
 159          
 160          
 161          
 162          
 163          
 164          
 165          
 166          
 167          
 168          
 169          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    111    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   EFM8BB2_FLASHPRIMITIVES                                           08/11/2020 17:07:22 PAGE 4   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
