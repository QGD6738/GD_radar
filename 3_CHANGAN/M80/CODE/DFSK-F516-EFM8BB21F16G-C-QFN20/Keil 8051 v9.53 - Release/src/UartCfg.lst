C51 COMPILER V9.60.0.0   UARTCFG                                                           08/08/2020 16:35:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UARTCFG
OBJECT MODULE PLACED IN .\src\UartCfg.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\WorkSpace\3_C
                    -HAN\4_M80\1_CODE\DFSK-F516-EFM8BB21F16G-C-QFN20_20200107\src\UartCfg.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGL
                    -EVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\WorkSpace\3_CHAN\4_M80\1
                    -_CODE\DFSK-F516-EFM8BB21F16G-C-QFN20_20200107\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/
                    -shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB2/inc) REGFILE(DFSK-F516-E
                    -FM8BB21F16G-C-QFN20_20200107.ORC) PRINT(.\src\UartCfg.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\UartCfg.OBJ)

line level    source

   1          #include "SI_EFM8BB2_DEFS.h"
   2          #include "Uart.h"
   3          #include "UartCfg.h"
   4          #include "Command.h"
   5          #include "Cpu.h"
   6          #include "Timer.h"
   7          
   8          BCM_Mode_buff       xdata  MsgBCM_Mode;
   9          BCM_Info_buff       xdata  MsgBCM_Info;
  10          RPAS_ReqMode_buff   xdata  MsgRadar_ReqMode;
  11          RPAS_Self_buff      xdata  MsgRadar_Self;
  12          RPAS_Distance_buff  xdata  MsgRadar_Distance;
  13          
  14          //stUart0_FrameInfoType Uart0_FrameInfoType;
  15          
  16          const WORD       xdata  MsgBCM_Mode_Init[4] =   \
  17                          {0x0000,0x0000,0x0000,0x0000};
  18          const WORD       xdata  MsgBCM_Info_Init[4] =   \
  19                          {0x0000,0x0004,0x0000,0x0000};
  20          const WORD   xdata  MsgRadar_ReqMode_Init[4] =  \
  21                  {0x00AA,0x000A,0x00AF,0x0063};
  22          const WORD      xdata  MsgRadar_Self_Init[4] =  \
  23                  {0x00BB,0x00FF,0x00BF,0x0000};
  24          const WORD  xdata  MsgRadar_Distance_Init[8] =  \
  25          //              {0x00CC,0x0000,0x0000,0x0000,0x0000,0x0000,0x00CF,0x019B};
  26                  {0x00CC,0x00FF,0x00FF,0x00FF,0x00FF,0x00FF,0x00CF,0x00FF};
  27          
  28          void   UART0_DataInit(void)
  29          {
  30   1              BYTE i;
  31   1              for(i=0;i<4;i++)
  32   1              {
  33   2                      MsgBCM_Mode._Byte[i] = MsgBCM_Mode_Init[i];
  34   2                      MsgBCM_Info._Byte[i] = MsgBCM_Info_Init[i];
  35   2                      MsgRadar_ReqMode._Word[i] = MsgRadar_ReqMode_Init[i];
  36   2                      MsgRadar_Self._Byte[i] = MsgRadar_Self_Init[i];
  37   2              }
  38   1      
  39   1              for(i=0;i<8;i++)
  40   1              {
  41   2                      MsgRadar_Distance._Byte[i] = MsgRadar_Distance_Init[i];
  42   2              }
  43   1      }
  44          
  45          
  46          BYTE   CalcByteEVEN(BYTE value)
  47          {
  48   1         BYTE i,evensum,ret;
  49   1         evensum = 0;
  50   1         ret = 0;
  51   1         for(i=0;i<8;i++)
C51 COMPILER V9.60.0.0   UARTCFG                                                           08/08/2020 16:35:50 PAGE 2   

  52   1         {
  53   2                 if(BIT_SHIFLEFT(value,i) == 0x01)
  54   2                 {
  55   3                         evensum++;
  56   3                 }
  57   2         }
  58   1         ret = evensum%2;
  59   1         return ret;
  60   1      }
  61          
  62          BYTE   CalcFrameChecksum(E_Uart0_FrameType mode)
  63          {
  64   1              BYTE i,ret;
  65   1              WORD checksum;
  66   1              checksum = 0x0000;
  67   1              ret = 0;
  68   1              switch (mode)
  69   1              {
  70   2                      case UART0_FRM_DISTANCE:
  71   2                      {
  72   3                              for(i=0;i<7;i++)
  73   3                              {
  74   4                                      checksum += (BYTE)(MsgRadar_Distance._Byte[i] & (WORD)0x00FF);
  75   4                              }
  76   3                              checksum = checksum % 256;
  77   3                              break;
  78   3                      }
  79   2                      case UART0_FRM_REQMODE:
  80   2                      {
  81   3                              for(i=0;i<3;i++)
  82   3                              {
  83   4                                      checksum += (BYTE)(MsgRadar_ReqMode._Word[i] & (WORD)0x00FF);
  84   4                              }
  85   3                              checksum = checksum % 256;
  86   3                              break;
  87   3                      }
  88   2                      case UART0_FRM_VECHMOD:
  89   2                      {
  90   3                              for(i=0;i<3;i++)
  91   3                              {
  92   4                                      checksum += (BYTE)(MsgBCM_Mode._Byte[i] & (WORD)0x00FF);
  93   4                              }
  94   3                              checksum = checksum % 256;
  95   3                              break;
  96   3                      }
  97   2      
  98   2                      case UART0_FRM_SENDSELF:
  99   2                      {
 100   3                              for(i=0;i<3;i++)
 101   3                              {
 102   4                                      checksum += (BYTE)(MsgRadar_Self._Byte[i] & (WORD)0x00FF);
 103   4                              }
 104   3                              checksum = checksum % 256;
 105   3                              break;
 106   3                      }
 107   2      
 108   2                      case UART0_FRM_VECHINFO:
 109   2                      {
 110   3                              for(i=0;i<3;i++)
 111   3                              {
 112   4                                      checksum += (BYTE)(MsgBCM_Info._Byte[i] & (WORD)0x00FF);
 113   4                              }
 114   3                              checksum = checksum % 256;
C51 COMPILER V9.60.0.0   UARTCFG                                                           08/08/2020 16:35:50 PAGE 3   

 115   3                              break;
 116   3                      }
 117   2              }
 118   1              ret = checksum;
 119   1              return ret;
 120   1      }
 121          
 122          void   ReceiveFramereCorresponding(WORD start)
 123          {
 124   1              Uart0_ReceiveInfoType* pCtt;
 125   1          pCtt = &gUart0ReceivePduInfo;
 126   1      
 127   1              if(start == 0xAA)
 128   1              {
 129   2                      MsgBCM_Mode._bit.Header         = (BYTE)(pCtt->ReceiveBuff[0]);
 130   2                      MsgBCM_Mode._bit.Header_EVEN    = ((pCtt->ReceiveBuff[0] >> 8)&0x01);
 131   2                      MsgBCM_Mode._bit.VechiMode      = (BYTE)(pCtt->ReceiveBuff[1]);
 132   2                      MsgBCM_Mode._bit.VechiMode_EVEN = ((pCtt->ReceiveBuff[1] >> 8)&0x01);
 133   2                      MsgBCM_Mode._bit.Tail           = (BYTE)(pCtt->ReceiveBuff[2]);
 134   2                      MsgBCM_Mode._bit.Tail_EVEN      = ((pCtt->ReceiveBuff[2] >> 8)&0x01);
 135   2                      MsgBCM_Mode._bit.Checksum       = (BYTE)(pCtt->ReceiveBuff[3]);
 136   2                      MsgBCM_Mode._bit.Checksum_EVEN  = ((pCtt->ReceiveBuff[3] >> 8)&0x01);
 137   2              }
 138   1              else if(start == 0xCC)
 139   1              {
 140   2                      MsgBCM_Info._bit.Header           = (BYTE)(pCtt->ReceiveBuff[0]);
 141   2                      MsgBCM_Info._bit.Header_EVEN      = ((pCtt->ReceiveBuff[0] >> 8)&0x01);
 142   2                      MsgBCM_Info._bit.VehicleSpeed     = ((pCtt->ReceiveBuff[1])&0x01);
 143   2                      MsgBCM_Info._bit.ReversGearSts    = ((pCtt->ReceiveBuff[1] >> 1)&0x01);
 144   2                      MsgBCM_Info._bit.ParkingGearSts   = ((pCtt->ReceiveBuff[1] >> 2)&0x01);
 145   2                      MsgBCM_Info._bit.FrontSwitchSts   = ((pCtt->ReceiveBuff[1] >> 3)&0x01);
 146   2                      MsgBCM_Info._bit.VechileInfo_EVEN = ((pCtt->ReceiveBuff[1] >> 8)&0x01);
 147   2                      MsgBCM_Info._bit.Tail             = (BYTE)(pCtt->ReceiveBuff[2]);
 148   2                      MsgBCM_Info._bit.Tail_EVEN        = ((pCtt->ReceiveBuff[2] >> 8)&0x01);
 149   2                      MsgBCM_Info._bit.Checksum         = (BYTE)(pCtt->ReceiveBuff[3]);
 150   2                      MsgBCM_Info._bit.Checksum_EVEN    = ((pCtt->ReceiveBuff[3] >> 8)&0x01);
 151   2              }
 152   1              else
 153   1              {
 154   2                      InitUart0ReceiveVar();
 155   2              }
 156   1      
 157   1      }
 158          
 159          void InitUart0ReceiveVar(void)
 160          {
 161   1              BYTE i;
 162   1      
 163   1              for(i=0;i<4;i++)
 164   1              {
 165   2                      gUart0ReceivePduInfo.ReceiveBuff[i] = 0x0000;
 166   2                      gUart0ReceivePduInfo.ReceiveByteBuff[i] = 0x0000;
 167   2              }
 168   1              gUart0ReceivePduInfo.pReceiveData = gUart0ReceivePduInfo.ReceiveBuff;
 169   1              gUart0ReceivePduInfo.ReceiveByteIdx = 0;
 170   1              gUart0ReceivePduInfo.ReceiveCheckSum = 0;
 171   1              gUart0ReceivePduInfo.ReceiveDatalen = VechileDataLen;
 172   1              gUart0ReceivePduInfo.ReceiveERRFlag = NULL_ERR;
 173   1      
 174   1      
 175   1      }
 176          
 177          void   InitUart0AllVar(void)
C51 COMPILER V9.60.0.0   UARTCFG                                                           08/08/2020 16:35:50 PAGE 4   

 178          {
 179   1              UART0_DataInit();
 180   1              gslinContext.CommState = UART0_FRM_NULL;
 181   1              gslinContext.pCurFrameInfo = Uart0_NULL_PTR;
 182   1              gslinContext.pReceiveFrameInfo = Uart0_NULL_PTR;
 183   1              gslinContext.pCurFrameInfo->CurrentDataPtr = MsgBCM_Mode_Init;
 184   1              InitUart0ReceiveVar();
 185   1      
 186   1      
 187   1      }
 188          
 189          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    936    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     96    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
