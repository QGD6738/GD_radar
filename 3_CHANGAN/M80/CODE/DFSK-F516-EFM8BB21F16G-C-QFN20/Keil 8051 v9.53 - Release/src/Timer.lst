C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\src\Timer.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\WorkSpace\3_C
                    -HAN\4_M80\1_CODE\DFSK-F516-EFM8BB21F16G-C-QFN20_20200107\src\Timer.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEV
                    -EL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\WorkSpace\3_CHAN\4_M80\1_C
                    -ODE\DFSK-F516-EFM8BB21F16G-C-QFN20_20200107\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/sh
                    -ared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB2/inc) REGFILE(DFSK-F516-EFM
                    -8BB21F16G-C-QFN20_20200107.ORC) PRINT(.\src\Timer.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Timer.OBJ)

line level    source

   1          /*********************************************************************************************************
             -************
   2          ** FILE NAME: Timer.c
   3          **
   4          ** PROJECT:  长城H2倒车雷达
   5          ** CPU:      EFM8BB21F16G
   6          ** COMPILER: 芯科
   7          ** -------------------------------------------------------------------------------------------------------
             -------------
   8          ** VERSION:  V1.0
   9          ** DATE:     2018.12.24
  10          **********************************************************************************************************
             -***********/
  11          #include "cpu.h"
  12          #include "Timer.h"
  13          #include "DetectObj.h"
  14          #include "Serial.h"
  15          
  16          BOOL xdata bTimeFlag;
  17          BOOL xdata b50msFlag;
  18          WORD xdata w50msCnt;
  19          BOOL xdata bLevel;
  20          WORD xdata wTime;
  21          WORD xdata wTimeMs;
  22          BYTE xdata bSensorCheckFlag;
  23          WORD xdata wSensorCheckTime;
  24          
  25          
  26          /*********************************************************************************************************
             -************
  27          ** Init the timer variable
  28          **********************************************************************************************************
             -***********/
  29          void Time_InitVariable(void)
  30          {
  31   1              bTimeFlag = 0;
  32   1              b50msFlag = 0;
  33   1              w50msCnt  = 0;
  34   1              bLevel = 0;
  35   1              wTime = 0;
  36   1              //bSensorCheckFlag = 0;
  37   1              //wSensorCheckTime = 0;
  38   1      }
  39          
  40          
  41          /*********************************************************************************************************
             -************
  42          ** Init the PCA0 count
  43          **********************************************************************************************************
             -***********/
  44          void Time_InitPCA0(void)
C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 2   

  45          {
  46   1          SFRPAGE_TEMP = SFRPAGE;
  47   1          SFRPAGE = 0x00;
  48   1      
  49   1              PCA0CN0_CF   = 0; //Clear interrupt flag;
  50   1              PCA0CN0_CCF0 = 0; //Clear interrupt flag;
  51   1              PCA0CN0_CCF1 = 0; //Clear interrupt flag;
  52   1              PCA0CN0_CCF2 = 0; //Clear interrupt flag;
  53   1      
  54   1              PCA0MD           = 0x01;/*bit1/2/3 = 000; Set clock is system/12; cnt = 12/49 = 0.2448us;
  55   1                                                        Measurement max pulse is 16ms
  56   1                                                        bit0 = 1; Set PCA0 overflow interrupt; CF is enable
  57   1                                                      */
  58   1              PCA0PWM          = 0x00;//No use
  59   1              PCA0CLR          = 0x00;//No use
  60   1              PCA0POL          = 0x00;//No use
  61   1              PCA0CENT         = 0x00;//No use
  62   1              PCA0L            = 0x00;//PCA0 count
  63   1              PCA0H            = 0x00;//PCA0 count
  64   1      
  65   1              PCA0CPM0         = 0xB0;/*bit7 = 1; Set 16 bit count mode
  66   1                                                        bit6 = 0; Close Comparator function
  67   1                                                        bit5 = 1; Capture Positive Function Enable
  68   1                                                        bit4 = 1; Capture Negative Function Enable
  69   1                                                        bit3 = 0; Match Function disable
  70   1                                                        bit2 = 0; Toggle Functiondisable
  71   1                                                        bit1 = 0; Pulse Width Modulation Mode disable
  72   1                                                        bit0 = 0; Capture/Compare Flag Interrupt Enable
  73   1                                                      */
  74   1              PCA0CPM1         = 0xB0;
  75   1      
  76   1              PCA0CPM2         = 0x00;//channel not used
  77   1      
  78   1              EIE1             = 0x10;//Enable interruput
  79   1              EIP1            |= 0x10;//11; Set Interrupt Priority; 11 is highest; 00 is lowest;
  80   1              EIP1H           |= 0x10;
  81   1              PCA0CN0_CR   = 1;   //Start PCA0;
  82   1      
  83   1              SFRPAGE = SFRPAGE_TEMP;
  84   1      }
  85          
  86          void Start_PCA0_Comparator(void)
  87          {
  88   1              PCA0      = 0xFFF0;
  89   1              Serial.bComparatorFlag = TRUE;
  90   1      }
  91          void Stop_PCA0_Comparator(void)
  92          {
  93   1              DATA_HIGH;
  94   1              Serial.bComparatorFlag = FALSE;
  95   1      }
  96          
  97          void Start_PCA0_Capture(BYTE CH)
  98          {
  99   1          SFRPAGE_TEMP = SFRPAGE;
 100   1          SFRPAGE = 0x00;
 101   1          PCA0CN0_CR   = 0;   //Stop PCA0;
 102   1              if(CH == 0)
 103   1              {
 104   2                      PCA0CPM0 |= 0x31;
 105   2              }
 106   1              if(CH == 1)
 107   1              {
C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 3   

 108   2                      PCA0CPM1 |= 0x31;
 109   2              }
 110   1              if(CH == 2)
 111   1              {
 112   2                      PCA0CPM2 |= 0x31;
 113   2              }
 114   1              PCA0CN0_CR   = 1;   //Start PCA0;
 115   1          SFRPAGE = SFRPAGE_TEMP;
 116   1      }
 117          
 118          void Stop_PCA0_Capture(BYTE CH)
 119          {
 120   1          SFRPAGE_TEMP = SFRPAGE;
 121   1          SFRPAGE = 0x00;
 122   1          PCA0CN0_CR   = 0;   //Stop PCA0;
 123   1              if(CH == 0)
 124   1              {
 125   2                      PCA0CPM0 &= (~0x31);
 126   2              }
 127   1              if(CH == 1)
 128   1              {
 129   2                      PCA0CPM1 &= (~0x31);
 130   2              }
 131   1              if(CH == 2)
 132   1              {
 133   2                      PCA0CPM2 &= (~0x31);
 134   2              }
 135   1              PCA0CN0_CR   = 1;   //Start PCA0;
 136   1          SFRPAGE = SFRPAGE_TEMP;
 137   1      
 138   1         //TEST
 139   1      //    SFRPAGE_TEMP = SFRPAGE;
 140   1      //    SFRPAGE = 0x00;
 141   1      //    PCA0CN0_CR   = 0;   //Stop PCA0;
 142   1      //    SFRPAGE = SFRPAGE_TEMP;
 143   1      
 144   1      }
 145          /*********************************************************************************************************
             -************
 146          ** Set the 1ms timer.
 147          **********************************************************************************************************
             -***********/
 148          void Time_Init1msTimer(void) //use time 2
 149          {
 150   1          SFRPAGE_TEMP = SFRPAGE;
 151   1          SFRPAGE = 0x00;
 152   1      
 153   1              TMR2CN0_T2XCLK0 = 0;    //bit0/bit1 = 00; Set clock is system/12; cnt =12/49us=0.2449us;
 154   1              TMR2CN0_T2XCLK1 = 0;
 155   1              TMR2CN0_TF2CEN  = 0;    //Disable capture
 156   1              TMR2CN0_T2SPLIT = 0;    //Set 16 bit mode
 157   1              TMR2L                   = 0xFF;
 158   1              TMR2H                   = 0xFF;
 159   1              TMR2RLL                 = (BYTE)((0xFFFF-4083)>>0);     //Set reload value(1000us ：cnt = 1000/12*49 = 4083)
 160   1              TMR2RLH                 = (BYTE)((0xFFFF-4083)>>8);
 161   1              IE_ET2                  = 1;    //Enable interrupt;
 162   1              IP                         &= (~0x20); //10; Set Interrupt Priority; 11 is highest; 00 is lowest;
 163   1              IPH                        |= ( 0x20);
 164   1              TMR2CN0_TR2     = 1;    //Start T2
 165   1      
 166   1          SFRPAGE = SFRPAGE_TEMP;
 167   1      }
 168          
C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 4   

 169          
 170          /*********************************************************************************************************
             -************
 171          ** Initial the 32ms timer.
 172          **********************************************************************************************************
             -***********/
 173          void Time_Init32msTimer(void) //use time 0
 174          {
 175   1              CKCON0  |= 0x04;        //Timer 0 high byte uses the system clock
 176   1              CKCON0  |= 0x02;        //Set Timer0/1 clock is system/48; cnt = 0.98us
 177   1              TMOD    &= (~0x04);     //bit3; Set 0 is timer mode;set 1 is count mode
 178   1              TMOD    |= 1;           //bit0/bit1; Set 0 is 13 bit;Set 1 is 16 bit; Set 2 is reload 8 bit; Set 3 is two 8 bit;
 179   1              TL0              = 0x00;
 180   1              TH0              = 0x00;
 181   1              IE_ET0   = 0;           //Disable interrupt;
 182   1              IP              |= 0x02;    //11; Set Interrupt Priority; 11 is highest; 00 is lowest;
 183   1              IPH         |= 0x02;
 184   1      
 185   1              TCON_TR0 = 0;           //stop T0
 186   1      }
 187          
 188          
 189          /*********************************************************************************************************
             -************
 190          ** OPEN the 32ms timer interruput.
 191          **********************************************************************************************************
             -***********/
 192          void EnableThe32msTimerInterrupt()
 193          {
 194   1              TCON_TF0 = 0;           //Clear interrupt flag;
 195   1              IE_ET0 = 1;             //Enable interrupt;
 196   1      }
 197          
 198          /*********************************************************************************************************
             -************
 199          ** CLOSE the 32ms timer interruput.
 200          **********************************************************************************************************
             -***********/
 201          void DisableThe32msTimerInterrupt()
 202          {
 203   1              IE_ET0 = 0;             //Disable interrupt;
 204   1      }
 205          
 206          
 207          /*********************************************************************************************************
             -************
 208          ** Initial the Uart0 Baud Rate timer.
 209          **********************************************************************************************************
             -***********/
 210          void Time_InitUart0Timer(void)  //Timer 1
 211          {
 212   1              SFRPAGE_TEMP = SFRPAGE;
 213   1      //      CKCON0  |= 0x04;        //Timer 0 high byte uses the system clock
 214   1      //      CKCON0  |= 0x02;        //Set Timer0/1 clock is system/48; cnt = 0.98us
 215   1      
 216   1              CKCON0  &= (~0x08);     //Timer 1 high byte uses the SCA clock
 217   1              TMOD    &= (~0x40);             //bit3; Set 0 is timer mode;set 1 is count mode
 218   1              TMOD    |= 0x20;                //bit0/bit1; Set 0 is 13 bit;Set 1 is 16 bit; Set 2 is reload 8 bit; Set 3 is two 8 bit;
 219   1              TMOD    &= (~0x10);
 220   1      
 221   1              TL1              = 0x96;//0x96;
 222   1              TH1              = 0x96;//0x96;
 223   1      
C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 5   

 224   1              SFRPAGE = 0x10;
 225   1              IE_ET1   = 0;           //Disable interrupt;
 226   1              IP              |= 0x08;    //11; Set Interrupt Priority; 11 is highest; 00 is lowest;
 227   1              IPH         |= 0x08;
 228   1              SFRPAGE = SFRPAGE_TEMP;
 229   1      
 230   1              TCON_TR1 = 0;           //stop T1
 231   1      }
 232          
 233          void StartTheUart0Timer(void)
 234          {
 235   1              TCON_TF1 = 0;
 236   1              TCON_TR1 = 1;   //start T1
 237   1      }
 238          
 239          void StopTheUart0Timer(void)
 240          {
 241   1              TCON_TF1 = 0;
 242   1              TCON_TR1 = 0;   //stop T1
 243   1      
 244   1      }
 245          
 246          
 247          void Time_InitTheDelayTimer(void) //time 4
 248          {
 249   1          SFRPAGE_TEMP = SFRPAGE;
 250   1          SFRPAGE = 0x10;
 251   1              TMR4CN0_T4XCLK0 = 0;    //bit0/bit1 = 00; Set clock is system/12; cnt =12/49us=0.2449us;
 252   1              TMR4CN0_T4XCLK1 = 0;
 253   1              TMR4CN0_TF4CEN  = 0;    //Disable capture
 254   1              TMR4CN0_T4SPLIT = 0;    //Set 16 bit mode
 255   1              TMR4L                   = 0xFF;
 256   1              TMR4H                   = 0xFF;
 257   1              TMR4RLL                 = 0x00;
 258   1              TMR4RLH                 = 0x00;
 259   1              EIP2               &= (~0x10);//00; Set Interrupt Priority; 11 is highest; 00 is lowest;
 260   1              EIP2H              &= (~0x10);
 261   1              EIE2               &= (~0x10); //Disable interrupt;
 262   1      
 263   1              TMR4CN0_TR4     = 0;    //Stop T3
 264   1      
 265   1          SFRPAGE = SFRPAGE_TEMP;
 266   1      }
 267          
 268          void Time_InitAdcTriggerTimer(void) //time 3
 269          {
 270   1          SFRPAGE_TEMP = SFRPAGE;
 271   1          SFRPAGE = 0x00;
 272   1      
 273   1              TMR3CN0 = 0x00; /* bit0/bit1 = 00; Set clock is system/12; cnt =12/49us=0.2449us;
 274   1                                                 bit2 = 0; T3 stop
 275   1                                                 bit3 = 0; Set 16 bit mode
 276   1                                               */
 277   1              TMR3L   = 0xFF;
 278   1              TMR3H   = 0xFF;
 279   1              TMR3RLL = (BYTE)((0xFFFF-((COUNT_TIME_UNIT*49)/12))>>0);        //Set reload value(35us ：cnt = 35/12*49 = 142)
 280   1              TMR3RLH = (BYTE)((0xFFFF-((COUNT_TIME_UNIT*49)/12))>>8);
 281   1              EIP1   |= 0x80;         //11; Set Interrupt Priority; 11 is highest; 00 is lowest;
 282   1              EIP1H  |= 0x80;
 283   1              EIE1   &= (~0x80);//bit8; Disable interrupt
 284   1              TMR3CN0&= (~0x04);//Stop T3
 285   1      
 286   1          SFRPAGE = SFRPAGE_TEMP;
C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 6   

 287   1      }
 288          
 289          void Time_StartAdcTrigger(void)
 290          {
 291   1          SFRPAGE_TEMP = SFRPAGE;
 292   1          SFRPAGE = 0x00;
 293   1      
 294   1              TMR3CN0&= (~0x80);      //bit7; Clear interrupt flag
 295   1              TMR3L   = 0xFF;
 296   1              TMR3H   = 0xFF;
 297   1              TMR3CN0|= 0x04;
 298   1              EIE1   |= 0x80;         //bit7; Enable interrupt
 299   1      
 300   1          SFRPAGE = SFRPAGE_TEMP;
 301   1      }
 302          
 303          void Time_StopAdcTrigger(void)
 304          {
 305   1          SFRPAGE_TEMP = SFRPAGE;
 306   1          SFRPAGE = 0x00;
 307   1      
 308   1              TMR3CN0 &= (~0x04);
 309   1              EIE1    &= (~0x80);//bit8; Disable interrupt
 310   1      
 311   1          SFRPAGE = SFRPAGE_TEMP;
 312   1      }
 313          
 314          void StartThe32msTimer (void)
 315          {
 316   1          SFRPAGE_TEMP = SFRPAGE;
 317   1          SFRPAGE  = 0x00;
 318   1      
 319   1              TL0              = 0x00;
 320   1              TH0              = 0x00;
 321   1              TCON_TR0 = 1;   //start T0
 322   1      
 323   1          SFRPAGE  = SFRPAGE_TEMP;
 324   1      }
 325          
 326          void StopThe32msTimer (void)
 327          {
 328   1          SFRPAGE_TEMP = SFRPAGE;
 329   1          SFRPAGE  = 0x00;
 330   1      
 331   1              TCON_TR0 = 0;   //stop T0
 332   1      
 333   1          SFRPAGE  = SFRPAGE_TEMP;
 334   1      }
 335          
 336          void Start1msTimer (void)
 337          {
 338   1          SFRPAGE_TEMP = SFRPAGE;
 339   1          SFRPAGE = 0x00;
 340   1              TMR2L   = 0xFF;
 341   1              TMR2H   = 0xFF;
 342   1              IE_ET2  = 1;            //Start
 343   1              TMR2CN0_TR2 = 1;        //Start T2
 344   1      
 345   1          SFRPAGE = SFRPAGE_TEMP;
 346   1      }
 347          
 348          void Stop1msTimer (void)
 349          {
C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 7   

 350   1          SFRPAGE_TEMP = SFRPAGE;
 351   1          SFRPAGE = 0x00;
 352   1      
 353   1              IE_ET2  = 0;            //Stop
 354   1              TMR2CN0_TR2 = 0;        //Stop T2
 355   1      
 356   1          SFRPAGE = SFRPAGE_TEMP;
 357   1      }
 358          
 359          /*********************************************************************************************************
             -************
 360          ** Delay unit:us
 361          **********************************************************************************************************
             -***********/
 362          void Delay1us(WORD byTime) //use time 4
 363          {
 364   1          WORD Temp;
 365   1      
 366   1          SFRPAGE_TEMP = SFRPAGE;
 367   1          SFRPAGE = 0x10;
 368   1      
 369   1          byTime<<= 2;
 370   1          Temp        = 0xFFFF-byTime;
 371   1          TMR4L       = (BYTE)(Temp&0x00FF);
 372   1          TMR4H       = (BYTE)((Temp&0xFF00)>>8);
 373   1              TMR4CN0_TR4 = 1;        //Start T3
 374   1          while(TMR4CN0_TF4H == 0)
 375   1          {
 376   2              CLR_WDT;
 377   2          }
 378   1          TMR4CN0_TR4 = 0;    //Stop T3
 379   1          TMR4CN0_TF4H = 0;
 380   1      
 381   1          SFRPAGE = SFRPAGE_TEMP;
 382   1      }
 383          
 384          /*********************************************************************************************************
             -************
 385          ** Delay unit:ms
 386          **********************************************************************************************************
             -***********/
 387          void Delay1ms(WORD byTime)
 388          {
 389   1              WORD i;
 390   1              for(i=0;i<byTime;i++)
 391   1              {
 392   2                      Delay1us(1000);
 393   2              }
 394   1      }
 395          
 396          
 397          /***********************************************************************
 398          ** 1ms interrupt serve function.
 399          ************************************************************************/
 400          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)//Timer2 use 1ms
 401          {
 402   1          bTimeFlag = TRUE; //1024us
 403   1          if(++w50msCnt >= 50)
 404   1              {
 405   2              w50msCnt = 0;
 406   2              b50msFlag = TRUE;
 407   2              }
 408   1          DetObj_RealTimeClock();
C51 COMPILER V9.60.0.0   TIMER                                                             08/08/2020 16:35:50 PAGE 8   

 409   1          TMR2CN0_TF2H = 0; //Clear interrupt flag
 410   1      }
 411          
 412          /***********************************************************************
 413          ** 32ms interrupt serve function.
 414          ************************************************************************/
 415          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)//Timer0 use 64ms
 416          {
 417   1      
 418   1      }
 419          
 420          
 421          /***********************************************************************
 422          ** Timer4 Delay interrupt serve function.
 423          ************************************************************************/
 424          SI_INTERRUPT (TIMER4_ISR, TIMER4_IRQn)//Timer4 use delay
 425          {
 426   1          SFRPAGE_TEMP = SFRPAGE;
 427   1          SFRPAGE = 0x10;
 428   1              TMR4CN0_TF4H = 0;
 429   1          SFRPAGE = SFRPAGE_TEMP;
 430   1      }
 431          
 432          
 433          /***********************************************************************
 434          ** Timer3 Adc triger sampling interrupt serve function.
 435          ************************************************************************/
 436          SI_INTERRUPT (TIMER3_ISR, TIMER3_IRQn)//Timer3 use adc sampling
 437          {
 438   1          if(RawData.wRawDataIndex < (DETECT_BUFFER_LENGTH-1))
 439   1              RawData.wRawDataIndex++;
 440   1          TMR3CN0 &= (~0x80); //bit7; Clear interrupt flag
 441   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    707    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
